from fastapi import FastAPI, Request, Form, UploadFile, File
from fastapi.templating import Jinja2Templates
from fastapi.responses import JSONResponse
import pandas as pd
import spacy
import langdetect
import speech_recognition as sr

# Load spaCy NLP model
nlp = spacy.load("en_core_web_sm")

app = FastAPI()
templates = Jinja2Templates(directory="templates")

# Load Excel Data
billing_df = pd.read_excel(r"C:\Users\rahul.k\Downloads\master table data.xlsx")
complaints_df = pd.read_excel(r"C:\Users\rahul.k\Downloads\comlpaiyts.xlsx")


def detect_language(text: str) -> str:
    """Detects language (English, Hindi, or Hinglish)."""
    try:
        lang = langdetect.detect(text)
        return "hi" if lang == "hi" else "en"
    except:
        return "en"


def create_html_table(data_dict, title, lang):
    """Creates an HTML table for structured output."""
    table = f"""
    <table border="1" style="border-collapse: collapse; width: 100%;">
        <tr style="background-color: #007bff; color: white; text-align: left;">
            <th colspan="2">{title}</th>
        </tr>
    """
    for key, value in data_dict.items():
        table += f"<tr><td><strong>{key}</strong></td><td>{value}</td></tr>"
    table += "</table>"

    return table


def process_query(query: str) -> str:
    """Processes user query and returns response."""
    lang = detect_language(query)
    doc = nlp(query.lower())

    # ЁЯФ╣ Bill Inquiry
    if any(token.text in ["bill", "amount", "payment", "account", "status"] for token in doc):
        for acc in billing_df["ACCOUNT_NO"].astype(str):
            if acc in query:
                data = billing_df[billing_df["ACCOUNT_NO"].astype(str) == acc]
                if not data.empty:
                    details = {
                        "рдирд╛рдо" if lang == "hi" else "Name": data.iloc[0]["NAME"],
                        "рдЙрдкрднреЛрдХреНрддрд╛ рд▓реЛрдб" if lang == "hi" else "Consumer Load": f"{data.iloc[0]['CONSUMER_LOAD']} kW",
                        "рдореАрдЯрд░ рдирдВрдмрд░" if lang == "hi" else "Meter Number": data.iloc[0]["METER_NUMBER"],
                        "рдмрд┐рд▓рд┐рдВрдЧ рд╕реНрдерд┐рддрд┐" if lang == "hi" else "Billing Status": data.iloc[0]["BILLING_STATUS"],
                        "рдЕрдВрддрд┐рдо рдмрд┐рд▓ рдорд╣реАрдирд╛" if lang == "hi" else "Last Bill Month-Year": data.iloc[0]["LAST_BILLMONTH_YEAR"],
                        "рдмрд┐рд▓ рд░рд╛рд╢рд┐" if lang == "hi" else "Bill Amount": f"тВ╣{data.iloc[0]['BILL_AMOUNT']}",
                        "рднреБрдЧрддрд╛рди рд░рд╛рд╢рд┐" if lang == "hi" else "Amount Paid": f"тВ╣{data.iloc[0]['AMOUNT_PAID']}",
                        "рдХрд╛рд░реНрдпрд╛рд▓рдп" if lang == "hi" else "Office": data.iloc[0]["OFFICE_NAME"],
                    }
                    return create_html_table(details, f"{'рдЦрд╛рддреЗ ' + acc + ' рдХреА рдЬрд╛рдирдХрд╛рд░реА' if lang == 'hi' else 'Account ' + acc + ' Details'}", lang)

        return "тЭМ рдХреГрдкрдпрд╛ рдорд╛рдиреНрдп рдЦрд╛рддрд╛ рд╕рдВрдЦреНрдпрд╛ рджреЗрдВред" if lang == "hi" else "тЭМ Please provide a valid account number."

    # ЁЯФ╣ Power Cut Inquiry
    elif "bijli" in query and "kab" in query:
        return "тЪб рдкрдЯрдирд╛ рдореЗрдВ рдмрд┐рдЬрд▓реА 2 рдШрдВрдЯреЗ рдореЗрдВ рдЖрдПрдЧреАред ЁЯУЮ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 1912" if lang == "hi" else "тЪб Power will be restored in 2 hours in Patna. ЁЯУЮ Helpline: 1912"

    # ЁЯФ╣ Complaint Status
    elif "complaint" in query or "issue" in query:
        for acc in complaints_df["ACCOUNT_NO"].astype(str):
            if acc in query:
                data = complaints_df[complaints_df["ACCOUNT_NO"].astype(str) == acc]
                if not data.empty:
                    details = {
                        "рд╢рд┐рдХрд╛рдпрдд рдкреНрд░рдХрд╛рд░" if lang == "hi" else "Complaint Type": data.iloc[0]["REQUEST_TYPE"],
                        "рд╕реНрдерд┐рддрд┐" if lang == "hi" else "Status": data.iloc[0]["APP_STATUS"],
                    }
                    return create_html_table(details, "ЁЯУв **рд╢рд┐рдХрд╛рдпрдд рд╕реНрдерд┐рддрд┐**" if lang == "hi" else "ЁЯУв **Complaint Status**", lang)

        return "рдХреЛрдИ рд╢рд┐рдХрд╛рдпрдд рдирд╣реАрдВ рдорд┐рд▓реАред" if lang == "hi" else "No complaints found for this account."

    # ЁЯФ╣ New Connection Inquiry
    elif "naya connection" in query or "new connection" in query:
        details = {
            "рдЪрд░рдг 1я╕ПтГг" if lang == "hi" else "Step 1я╕ПтГг": "SBPDCL рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рдЬрд╛рдПрдВ: [SBPDCL Website](https://www.sbpdcl.co.in)" if lang == "hi" else "Visit: [SBPDCL Website](https://www.sbpdcl.co.in)",
            "рдЪрд░рдг 2я╕ПтГг" if lang == "hi" else "Step 2я╕ПтГг": "рдСрдирд▓рд╛рдЗрди рдЖрд╡реЗрджрди рдХрд░реЗрдВ" if lang == "hi" else "Apply Online",
            "рдЪрд░рдг 3я╕ПтГг" if lang == "hi" else "Step 3я╕ПтГг": "рд╕реБрд░рдХреНрд╖рд╛ рдЬрдорд╛ рд░рд╛рд╢рд┐ рдХрд╛ рднреБрдЧрддрд╛рди рдХрд░реЗрдВ" if lang == "hi" else "Pay Security Deposit",
            "рдЪрд░рдг 4я╕ПтГг" if lang == "hi" else "Step 4я╕ПтГг": "7 рджрд┐рдиреЛрдВ рдореЗрдВ рдореАрдЯрд░ рдЗрдВрд╕реНрдЯреЙрд▓ рд╣реЛрдЧрд╛" if lang == "hi" else "Meter Installation in 7 Days",
            "рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди ЁЯУЮ" if lang == "hi" else "Helpline ЁЯУЮ": "1912",
        }
        return create_html_table(details, "тЬЕ **рдирдпрд╛ рдХрдиреЗрдХреНрд╢рди рдкреНрд░рдХреНрд░рд┐рдпрд╛**" if lang == "hi" else "тЬЕ **New Connection Process**", lang)


    # ЁЯФ╣ Load Extension
    elif "load" in query and "badhana" or "enhancement" in query:  
        return ("ЁЯФ╣ **рд▓реЛрдб рдмрдврд╝рд╛рдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛:**\n"
                "1я╕ПтГг [SBPDCL Website](https://www.sbpdcl.co.in) рдкрд░ рдЖрд╡реЗрджрди рдХрд░реЗрдВ\n"
                "2я╕ПтГг рдПрдбреНрд░реЗрд╕ рдФрд░ рдЖрдИрдбреА рдкреНрд░реВрдл рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ\n"
                "3я╕ПтГг рд▓реЛрдб рдмрдврд╝рд╛рдиреЗ рдХреА рдлреАрд╕ рдЬрдорд╛ рдХрд░реЗрдВ\n"
                "ЁЯУЮ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 1912" if lang == "hi"
                else "ЁЯФ╣ **Load Enhancement Process:**\n"
                     "1я╕ПтГг Apply Online at [SBPDCL Website](https://www.sbpdcl.co.in)\n"
                     "2я╕ПтГг Upload Address & ID Proof\n"
                     "3я╕ПтГг Pay Load Enhancement Fee\n"
                     "ЁЯУЮ Helpline: 1912")

    # ЁЯФ╣ Smart Meter Benefits
    elif "smart meter" in query:
        return ("ЁЯФ╣ **рд╕реНрдорд╛рд░реНрдЯ рдореАрдЯрд░ рдХреЗ рдлрд╛рдпрджреЗ:**\n"
                "тЬЕ рдСрдирд▓рд╛рдЗрди рд░рд┐рдЪрд╛рд░реНрдЬ\n"
                "тЬЕ рд╕рдЯреАрдХ рдмрд┐рд▓рд┐рдВрдЧ\n"
                "тЬЕ рддреБрд░рдВрдд рдХрдЯреМрддреА/рд░реАрдХрдиреЗрдХреНрд╢рди\n"
                "тЬЕ рдорд╛рд╕рд┐рдХ рдЙрдкрдпреЛрдЧ рдЕрд▓рд░реНрдЯ" if lang == "hi"
                else "ЁЯФ╣ **Smart Meter Benefits:**\n"
                     "тЬЕ Online Recharge\n"
                     "тЬЕ Accurate Billing\n"
                     "тЬЕ Instant Power Cut/Reconnection\n"
                     "тЬЕ Monthly Usage Alerts")

    # ЁЯФ╣ Default Response
    else:
        if lang == "hi":
            if query.lower() in ["hi", "hello"]:
                return "рдирдорд╕реНрддреЗ! рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?"
            elif query.lower() == "kaise ho":
                return "рдореИрдВ рдареАрдХ рд╣реВрдБ, рдмрддрд╛рдУ рдХреНрдпрд╛ рдХрд░ рд░рд╣рд╛ рд╣реВрдБ?"
            elif query.lower() == "mujhe help chahiye":
                return "рд╣рд╛рдБ, рдмрддрд╛рдУ рдХреНрдпрд╛ рдорджрдж рдЪрд╛рд╣рд┐рдП?"
            else:
                return "тЭМ рдореБрдЭреЗ рд╕рдордЭ рдореЗрдВ рдирд╣реАрдВ рдЖрдпрд╛! рдХреГрдкрдпрд╛ рд╕реНрдкрд╖реНрдЯ рдХрд░реЗрдВред"
        else:
            if query.lower() in ["hi", "hello"]:
                return "Hello! How can I assist you?"
            elif query.lower() == "how are you":
                return "I'm doing well, tell me what you're up to?"
            elif query.lower() == "i need help":
                return "Yes, tell me what help you need?"
            else:
                return "тЭМ I didn't understand! Please clarify."


@app.post("/chat/") 
async def chat(message: str = Form(...)):
    reply = process_query(message)
    return {"reply": reply}


@app.post("/speech-to-text/") 
async def speech_to_text(audio: UploadFile = File(...)):
    """Converts audio to text using SpeechRecognition."""
    recognizer = sr.Recognizer()
    with sr.AudioFile(audio.file) as source:
        audio_data = recognizer.record(source)
        try:
            text = recognizer.recognize_google(audio_data, language="hi-IN")
            return {"text": text}
        except sr.UnknownValueError:
            return {"error": "Speech not recognized"}
        except sr.RequestError:
            return {"error": "API request failed"}


@app.get("/")
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})
